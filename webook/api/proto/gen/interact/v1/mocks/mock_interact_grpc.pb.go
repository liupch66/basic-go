// Code generated by MockGen. DO NOT EDIT.
// Source: interact_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=mockinteract -source=interact_grpc.pb.go -destination=mocks/mock_interact_grpc.pb.go InteractServiceClient
//

// Package mockinteract is a generated GoMock package.
package mockinteract

import (
	context "context"
	reflect "reflect"

	interactv1 "github.com/liupch66/basic-go/webook/api/proto/gen/interact/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInteractServiceClient is a mock of InteractServiceClient interface.
type MockInteractServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInteractServiceClientMockRecorder
	isgomock struct{}
}

// MockInteractServiceClientMockRecorder is the mock recorder for MockInteractServiceClient.
type MockInteractServiceClientMockRecorder struct {
	mock *MockInteractServiceClient
}

// NewMockInteractServiceClient creates a new mock instance.
func NewMockInteractServiceClient(ctrl *gomock.Controller) *MockInteractServiceClient {
	mock := &MockInteractServiceClient{ctrl: ctrl}
	mock.recorder = &MockInteractServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractServiceClient) EXPECT() *MockInteractServiceClientMockRecorder {
	return m.recorder
}

// CancelLike mocks base method.
func (m *MockInteractServiceClient) CancelLike(ctx context.Context, in *interactv1.CancelLikeRequest, opts ...grpc.CallOption) (*interactv1.CancelLikeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelLike", varargs...)
	ret0, _ := ret[0].(*interactv1.CancelLikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractServiceClientMockRecorder) CancelLike(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractServiceClient)(nil).CancelLike), varargs...)
}

// Collect mocks base method.
func (m *MockInteractServiceClient) Collect(ctx context.Context, in *interactv1.CollectRequest, opts ...grpc.CallOption) (*interactv1.CollectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collect", varargs...)
	ret0, _ := ret[0].(*interactv1.CollectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractServiceClientMockRecorder) Collect(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractServiceClient)(nil).Collect), varargs...)
}

// Get mocks base method.
func (m *MockInteractServiceClient) Get(ctx context.Context, in *interactv1.GetRequest, opts ...grpc.CallOption) (*interactv1.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*interactv1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractServiceClient)(nil).Get), varargs...)
}

// GetByIds mocks base method.
func (m *MockInteractServiceClient) GetByIds(ctx context.Context, in *interactv1.GetByIdsRequest, opts ...grpc.CallOption) (*interactv1.GetByIdsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIds", varargs...)
	ret0, _ := ret[0].(*interactv1.GetByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockInteractServiceClientMockRecorder) GetByIds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockInteractServiceClient)(nil).GetByIds), varargs...)
}

// IncrReadCnt mocks base method.
func (m *MockInteractServiceClient) IncrReadCnt(ctx context.Context, in *interactv1.IncrReadCntRequest, opts ...grpc.CallOption) (*interactv1.IncrReadCntResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncrReadCnt", varargs...)
	ret0, _ := ret[0].(*interactv1.IncrReadCntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractServiceClientMockRecorder) IncrReadCnt(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractServiceClient)(nil).IncrReadCnt), varargs...)
}

// Like mocks base method.
func (m *MockInteractServiceClient) Like(ctx context.Context, in *interactv1.LikeRequest, opts ...grpc.CallOption) (*interactv1.LikeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Like", varargs...)
	ret0, _ := ret[0].(*interactv1.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Like indicates an expected call of Like.
func (mr *MockInteractServiceClientMockRecorder) Like(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractServiceClient)(nil).Like), varargs...)
}

// MockInteractServiceServer is a mock of InteractServiceServer interface.
type MockInteractServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInteractServiceServerMockRecorder
	isgomock struct{}
}

// MockInteractServiceServerMockRecorder is the mock recorder for MockInteractServiceServer.
type MockInteractServiceServerMockRecorder struct {
	mock *MockInteractServiceServer
}

// NewMockInteractServiceServer creates a new mock instance.
func NewMockInteractServiceServer(ctrl *gomock.Controller) *MockInteractServiceServer {
	mock := &MockInteractServiceServer{ctrl: ctrl}
	mock.recorder = &MockInteractServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractServiceServer) EXPECT() *MockInteractServiceServerMockRecorder {
	return m.recorder
}

// CancelLike mocks base method.
func (m *MockInteractServiceServer) CancelLike(arg0 context.Context, arg1 *interactv1.CancelLikeRequest) (*interactv1.CancelLikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLike", arg0, arg1)
	ret0, _ := ret[0].(*interactv1.CancelLikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractServiceServerMockRecorder) CancelLike(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractServiceServer)(nil).CancelLike), arg0, arg1)
}

// Collect mocks base method.
func (m *MockInteractServiceServer) Collect(arg0 context.Context, arg1 *interactv1.CollectRequest) (*interactv1.CollectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", arg0, arg1)
	ret0, _ := ret[0].(*interactv1.CollectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractServiceServerMockRecorder) Collect(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractServiceServer)(nil).Collect), arg0, arg1)
}

// Get mocks base method.
func (m *MockInteractServiceServer) Get(arg0 context.Context, arg1 *interactv1.GetRequest) (*interactv1.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*interactv1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractServiceServer)(nil).Get), arg0, arg1)
}

// GetByIds mocks base method.
func (m *MockInteractServiceServer) GetByIds(arg0 context.Context, arg1 *interactv1.GetByIdsRequest) (*interactv1.GetByIdsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", arg0, arg1)
	ret0, _ := ret[0].(*interactv1.GetByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockInteractServiceServerMockRecorder) GetByIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockInteractServiceServer)(nil).GetByIds), arg0, arg1)
}

// IncrReadCnt mocks base method.
func (m *MockInteractServiceServer) IncrReadCnt(arg0 context.Context, arg1 *interactv1.IncrReadCntRequest) (*interactv1.IncrReadCntResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCnt", arg0, arg1)
	ret0, _ := ret[0].(*interactv1.IncrReadCntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractServiceServerMockRecorder) IncrReadCnt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractServiceServer)(nil).IncrReadCnt), arg0, arg1)
}

// Like mocks base method.
func (m *MockInteractServiceServer) Like(arg0 context.Context, arg1 *interactv1.LikeRequest) (*interactv1.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", arg0, arg1)
	ret0, _ := ret[0].(*interactv1.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Like indicates an expected call of Like.
func (mr *MockInteractServiceServerMockRecorder) Like(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractServiceServer)(nil).Like), arg0, arg1)
}

// mustEmbedUnimplementedInteractServiceServer mocks base method.
func (m *MockInteractServiceServer) mustEmbedUnimplementedInteractServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInteractServiceServer")
}

// mustEmbedUnimplementedInteractServiceServer indicates an expected call of mustEmbedUnimplementedInteractServiceServer.
func (mr *MockInteractServiceServerMockRecorder) mustEmbedUnimplementedInteractServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInteractServiceServer", reflect.TypeOf((*MockInteractServiceServer)(nil).mustEmbedUnimplementedInteractServiceServer))
}

// MockUnsafeInteractServiceServer is a mock of UnsafeInteractServiceServer interface.
type MockUnsafeInteractServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInteractServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeInteractServiceServerMockRecorder is the mock recorder for MockUnsafeInteractServiceServer.
type MockUnsafeInteractServiceServerMockRecorder struct {
	mock *MockUnsafeInteractServiceServer
}

// NewMockUnsafeInteractServiceServer creates a new mock instance.
func NewMockUnsafeInteractServiceServer(ctrl *gomock.Controller) *MockUnsafeInteractServiceServer {
	mock := &MockUnsafeInteractServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInteractServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInteractServiceServer) EXPECT() *MockUnsafeInteractServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInteractServiceServer mocks base method.
func (m *MockUnsafeInteractServiceServer) mustEmbedUnimplementedInteractServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInteractServiceServer")
}

// mustEmbedUnimplementedInteractServiceServer indicates an expected call of mustEmbedUnimplementedInteractServiceServer.
func (mr *MockUnsafeInteractServiceServerMockRecorder) mustEmbedUnimplementedInteractServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInteractServiceServer", reflect.TypeOf((*MockUnsafeInteractServiceServer)(nil).mustEmbedUnimplementedInteractServiceServer))
}
