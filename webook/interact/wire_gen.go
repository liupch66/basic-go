// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/liupch66/basic-go/webook/interact/events"
	"github.com/liupch66/basic-go/webook/interact/grpc"
	"github.com/liupch66/basic-go/webook/interact/ioc"
	"github.com/liupch66/basic-go/webook/interact/repository"
	"github.com/liupch66/basic-go/webook/interact/repository/cache"
	"github.com/liupch66/basic-go/webook/interact/repository/dao"
	"github.com/liupch66/basic-go/webook/interact/service"
)

// Injectors from wire.go:

func InitApp() *app {
	srcDB := ioc.InitSrcDB()
	dstDB := ioc.InitDstDB()
	doubleWritePool := ioc.InitDoubleWritePool(srcDB, dstDB)
	db := ioc.InitBizDB(doubleWritePool)
	interactDAO := dao.NewGORMInteractDAO(db)
	cmdable := ioc.InitRedis()
	interactCache := cache.NewRedisInteractCache(cmdable)
	loggerV1 := ioc.InitLogger()
	interactRepository := repository.NewCachedInteractRepository(interactDAO, interactCache, loggerV1)
	interactService := service.NewInteractService(interactRepository, loggerV1)
	interactServiceServer := grpc.NewInteractServiceServer(interactService)
	server := ioc.InitGRPCxServer(interactServiceServer)
	client := ioc.InitKafka()
	syncProducer := ioc.InitSyncProducer(client)
	producer := ioc.InitMigratorProducer(syncProducer)
	ginxServer := ioc.InitMigratorWeb(srcDB, dstDB, loggerV1, producer, doubleWritePool)
	interactReadEventConsumer := events.NewInteractReadEventConsumer(client, interactRepository, loggerV1)
	consumer := ioc.InitFixDataConsumer(client, loggerV1, srcDB, dstDB)
	v := ioc.NewConsumers(interactReadEventConsumer, consumer)
	mainApp := &app{
		server:         server,
		migratorServer: ginxServer,
		consumers:      v,
	}
	return mainApp
}

// wire.go:

var thirdPartyProvider = wire.NewSet(ioc.InitSrcDB, ioc.InitDstDB, ioc.InitDoubleWritePool, ioc.InitBizDB, ioc.InitRedis, ioc.InitLogger, ioc.InitKafka, ioc.InitSyncProducer)

var interactServiceProvider = wire.NewSet(dao.NewGORMInteractDAO, cache.NewRedisInteractCache, repository.NewCachedInteractRepository, service.NewInteractService)

var migratorProvider = wire.NewSet(ioc.InitFixDataConsumer, ioc.InitMigratorProducer, ioc.InitMigratorWeb)
