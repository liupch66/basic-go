// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/google/wire"
	"github.com/liupch66/basic-go/webook/interact/grpc"
	"github.com/liupch66/basic-go/webook/interact/repository"
	"github.com/liupch66/basic-go/webook/interact/repository/cache"
	"github.com/liupch66/basic-go/webook/interact/repository/dao"
	"github.com/liupch66/basic-go/webook/interact/service"
)

// Injectors from wire.go:

func InitInteractService() service.InteractService {
	gormDB := InitTestDB()
	interactDAO := dao.NewGORMInteractDAO(gormDB)
	cmdable := InitRedis()
	interactCache := cache.NewRedisInteractCache(cmdable)
	loggerV1 := InitLog()
	interactRepository := repository.NewCachedInteractRepository(interactDAO, interactCache, loggerV1)
	interactService := service.NewInteractService(interactRepository, loggerV1)
	return interactService
}

func InitGrpcServer() *grpc.InteractServiceServer {
	gormDB := InitTestDB()
	interactDAO := dao.NewGORMInteractDAO(gormDB)
	cmdable := InitRedis()
	interactCache := cache.NewRedisInteractCache(cmdable)
	loggerV1 := InitLog()
	interactRepository := repository.NewCachedInteractRepository(interactDAO, interactCache, loggerV1)
	interactService := service.NewInteractService(interactRepository, loggerV1)
	interactServiceServer := grpc.NewInteractServiceServer(interactService)
	return interactServiceServer
}

// wire.go:

var thirdPS = wire.NewSet(InitTestDB, InitRedis, InitLog)

var interactSvcPS = wire.NewSet(dao.NewGORMInteractDAO, cache.NewRedisInteractCache, repository.NewCachedInteractRepository, service.NewInteractService)
