#version: '3.0'
services:
  mysql8:
    image: "mysql:8.0.29"
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./script/mysql/:/docker-entrypoint-initdb.d/
    ports:
      - "3306:3306"

  redis:
    image: 'bitnami/redis:7.2'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'

  etcd:
    image: "bitnami/etcd:3.5.9"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    ports:
      - "22379:2379"

  mongodb:
    image: mongo:6.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"

#  mongo-express:
#    image: mongo-express:1.0.2
#    restart: always
##    depends_on:
##      - mongodb
#    ports:
##     - 访问 8081
#      - "8081:8081"
#    environment:
#      # 主要是保护 Mongo Express 的 UI，通过基本认证确保只有授权用户能够访问
#      # 这就是默认值,不写也可以,docker 启动时日志会红字显示:
#      # basicAuth credentials are "admin:pass", it is recommended you change this in your config.js!
##      ME_CONFIG_BASICAUTH_USERNAME: admin
##      ME_CONFIG_BASICAUTH_PASSWORD: pass
#      # Mongo Express 用来连接 MongoDB 数据库的凭据，确保它能正确执行对数据库的操作（如查看和修改数据）
##      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
##     这个url就是根据 mongo 里面的配置搞出来的
#      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/

  kafka:
    image: 'bitnami/kafka:3.6.0'
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      # 允许自动创建 topic，线上不要开启
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  prometheus:
    image: prom/prometheus:v3.0.1
    volumes:
      # 将本地的 prometheus 文件映射到容器内的配置文件
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      # 访问数据的端口
      - '9090:9090'

  zipkin:
    #    用的是不支持 Kafka 之类的简化版本
    image: openzipkin/zipkin-slim:3.4
    ports:
      - '9411:9411'

#  grafana:
#      image: grafana/grafana-enterprise:11.4.0
#      ports:
#        - '3000:3000'

  nacos:
    image: nacos/nacos-server:v2.4.3
    privileged: true
    environment:
      - MODE=standalone
    # 启动之后查看：http://localhost:8848/nacos
    ports:
      - "8848:8848"
      - "9848:9848"
    restart: always
    working_dir: /home/nacos